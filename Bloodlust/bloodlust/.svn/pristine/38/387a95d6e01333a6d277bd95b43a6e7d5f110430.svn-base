#!/usr/bin/env ruby -w
require 'rubygems'
require 'ruby_fann/neural_network'
require 'drb'
require 'liblust'
require 'libenum'
require 'drb/acl'
#require 'drb/ssl'

$SAFE = 1

class Bloodlust
	attr_accessor :bloodlust

 def train_nn
 	dataset_location = '../datasets/training-01.dat' 

	 dataset = []
	 desired_outputs = []
	 raw_dataset = load_training_data(dataset_location)

	 lambda_prepro = Proc.new { |x| normalize_dataset(x, x.mean, x.std) }

  	raw_dataset.each do |dim| 
			data, raw_desired_outputs = format_dataset(dim)
			normalized_data = lambda_prepro.call(data)
			dataset.push(normalized_data)
			desired_outputs.push(raw_desired_outputs)		
	  end

	 training_data = RubyFann::TrainData.new(
		:inputs => dataset,
		:desired_outputs => desired_outputs)

	 @bloodlust = RubyFann::Standard.new(
		:num_inputs => 13,
		:hidden_neurons => [80], # investigate this
		:num_outputs => 1)
	# set to 10 for development, set to 1000 for production
	@bloodlust.train_on_data(training_data, 10, 1, 0.01)
	 #@bloodlust.train_on_data(training_data, 10, 1, 0.01)
 end

#	def initialize
#		@nn = RubyFann::Standard.new(:num_inputs => 13,
#				:hidden_neurons => [80], :num_outputs => 1)
#		#@training = RubyFann::TrainData.new(:filename=> 'train.dat')
#	end

#	def train(inputs, desired_outputs) 
#		training_data = RubyFann::TrainData.new(
#			:inputs => inputs, :desired_outputs => desired_outputs)
# 		@nn.train_on_data(training_data, 1000, 1, 0.01)
#	end

	def run_blood(input)
		input_ary = input.split(',')
		input_ary.collect! {|i| i.to_f}
		output = @bloodlust.run(input_ary)
	end
	

end

acl = ACL.new(%w{deny all allow 95.154.200.229 allow 95.154.200.228 allow 98.248.61.31 allow 127.0.0.1})
DRb.install_acl(acl)

DRb.start_service 'druby://localhost:11000', Bloodlust.new
puts DRb.uri
DRb.thread.join
